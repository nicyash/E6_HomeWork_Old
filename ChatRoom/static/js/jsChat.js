const divProfil = document.querySelector('.div_profil');
const divRooms = document.querySelector('.div_rooms');
const divUsers = document.querySelector('.div_users');
const divChat = document.querySelector('.div_chat');
const domain = ('http://127.0.0.1:8000/api/');
const userId = window.userID;
let currentRoomId = "";

//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Does this cookie string begin with the name we want?
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length +

    1));break;}}}return cookieValue;
}
//–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
const csrftoken = getCookie('csrftoken');


// —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è WS –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
let sockNum =  'sn' + Math.floor(Math.random() * 100 + 1);


const socket = new WebSocket('ws://localhost:8000/ws/command/' + sockNum); // –∫–æ–º–∞–Ω–¥–Ω—ã–π –∫–∞–Ω–∞–ª
const socketForChat = new WebSocket('ws://localhost:8000/ws/chat/' + sockNum); //–¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
socket.onclose = async (event) => {
    console.error(event);
    window.alert('–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É!');
};

socket.onopen = () => load_userCard();
function load_userCard() {
    viewProfil(userId);
    viewRooms();
};

socket.onmessage = function(event) {
    let data = JSON.parse(event.data);
    console.log(data);

    if ('MessageList' in data) {
        showChat(data);
    };
};

// –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function viewProfil(userId) {
    fetch(domain + 'user/' + userId +'/')
        .catch(err => console.log(err))
        .then(response => response.json())
        .then(result => showProfil(result));
};

function viewUsers() {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–∫–∞–∑–∞–Ω—ã');
    fetch(domain + 'user/')
        .catch(err => console.log(err))
        .then(response => response.json())
        .then(result => showUsers(result));
};

// –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç
function viewRooms() {
    fetch(domain + 'rooms/')
        .catch(err => console.log(err))
        .then(response => response.json())
        .then(result => showRooms(result));
};

// –í—ã–≤–æ–¥ –ø—Ä–æ—Ñ–∏–ª—è –≤ –±—Ä–∞—É–∑–µ—Ä
function showProfil(item) {
    console.log(item);
    divProfil.innerHTML = `
    <div class="div_profil">
        <img class="img_avatar" src="${item.avatar}">
        <br>
        <strong>–°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É:</strong>
        <br>
        <input class="btn" id="avatar-input" type="file" accept="image/*"><br>
        <button class="btn" onclick="changeAvatar(${item.user})">–æ—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
        <p style="text-align: left;">ID: ${item.user}</p>
        <p style="text-align: left;">
        –ò–º—è: ${item.first_name}
        <button class="btn" onclick="changeFirstName(${item.user})">–∏–∑–º–µ–Ω–∏—Ç—å</button>
        </p>
        <h4 class="message" id="message"></h4>
    </div>
    `;
};

// –í—ã–≤–æ–¥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±—Ä–∞—É–∑–µ—Ä
 function showUsers(item) {
    let listUser = '';
    for (let key in item) {
        if (item[key].user != userId) {
            const newStringOnUser = `<tr><td><img class="img_avatar" width="22" height="22" src="${item[key].avatar}"><b><button style="width: 200px;" class="btn" onclick="jampInUser('${item[key].first_name}')">${item[key].first_name}</button></b></td></tr>`;
            listUser = listUser + newStringOnUser;
            };
    };
    listUser = '<table>' + listUser + '</table><br>'
    divUsers.innerHTML = listUser;
};

// –í—ã–≤–æ–¥ –∫–æ–º–Ω–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä
function showRooms(item) {
//    delete item.RoomList;
    let listRoom = '';
    for (let key in item) {
        const newStringOnRoom = `<tr><td><b><button style="width: 200px;" class="btn" onclick="jampInRoom(${item[key].id})">${item[key].name}</button></b></td>
        <td><button class="btn" onclick="deleteRoom(${item[key].id})">üóë</button></td>
        <td><button class="btn" onclick="changeRoom(${item[key].id})">üîÑ</button></td></tr>`;
        listRoom = listRoom + newStringOnRoom;
    };
    listRoom = '<table>' + listRoom + '</table><br>'
    listRoom = listRoom + `<input type="text" id="input_room" name="name_new_room" size="32" placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"><br>`
    listRoom = listRoom + `<button style="width: 275px;" class="btn btn_new_room">–°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É</button>`
    divRooms.innerHTML = listRoom;

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
    document.querySelector('.btn_new_room').addEventListener('click', () => {
        let name = document.getElementById("input_room");
        if (name.value !== "") {
            socket.send(JSON.stringify({'create_room': name.value}));
            console.log({'create_room': name.value});
            name.value = "";
            viewRooms();
        };
    });
};

// –∑–∞–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞
async function changeAvatar(userId) {
    const formData = new FormData();
    let fileField = document.querySelector('#avatar-input');
    if (fileField.files[0]) {
        formData.append('avatar', fileField.files[0]);
        try {
            const response = await fetch(domain + 'user/' + userId +'/', {
                method: 'PATCH',
                headers: {'X-CSRFToken': csrftoken},    //–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–∞–ª–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                body: formData
            });
            const result = await response.json();
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', JSON.stringify(result));
        } catch (error) {
            console.log('–í—Å–µ –ø—Ä–æ–ø–∞–ª–æ!!!');
            console.error('–û—à–∏–±–∫–∞:', error);
        }
        viewProfil(userId);
        viewUsers();;
    } else {
        document.querySelector('#message').innerText = '–≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª!';
    };
};

//–∑–∞–º–µ–Ω–∞ –∏–º–µ–Ω–∏
function changeFirstName(userId) {
    let name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è');
    socket.send(JSON.stringify({'replacement': 'changeFirstName', 'id': userId, 'name': name }));
    console.log({'replacement': 'changeFirstName', 'id': userId, 'name': name })
    viewProfil(userId);
};
// —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
function deleteRoom(item) {
    socket.send(JSON.stringify({'delete_room': item}));
    console.log(item, " –∫–æ–º–Ω–∞—Ç–∞ —É–¥–∞–ª–µ–Ω–∞")
    viewRooms();
};
// –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
function changeRoom(item) {
    let name = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è');
    socket.send(JSON.stringify({'change_room': item, 'name': name }));
    console.log(item)
    viewRooms();
};
//–ø–µ—Ä–µ—Ö–æ–¥ –≤—á–∞—Ç –∫–æ–º–Ω–∞—Ç—É
function jampInRoom(item) {
    viewUsers();
    delete item.RoomList;
    console.log("–ø–µ—Ä–µ—à–µ–ª –Ω–∞ –∫–æ–º–Ω–æ—Ç—É", item)
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–æ–º–Ω–∞—Ç—ã –≤ !!! –∫–æ–º–∞–Ω–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    socket.send(JSON.stringify({'load': 'messageList', 'room_id': item}));
    currentRoomId = item;
    console.log({'load': 'messageList', 'room_id': item});
    console.log(currentRoomId);
     // –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —á—Ç—É –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
    socketForChat.send(JSON.stringify({'usersendcommandroom': 'roomselect', 'newroom_id': item, 'oldroom_id': currentRoomId}));
    currentRoomId = item; // –æ–±–Ω–æ–≤–ª—è–µ–º ID —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
};
// –ø–µ—Ä–µ—Ö–æ–¥ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
function jampInUser(item) {
    let inputMessage = document.querySelector('.message_box');
    inputMessage.value += (item + ", ");

    console.log("–û–±—Ä–∞—â–∞—é—Å—å –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID ", item)
};

// –≤—ã–≤–æ–¥–∏–º —á–∞—Ç –≤ –±—Ä–∞—É–∑–µ—Ä
function showChat(item) {
    divChat.innerHTML = `<h3 style="text-align: center;">–ö–æ–º–Ω–∞—Ç–∞: ${item['MessageList']}</h3>
    <textarea class="textarea" name="textarea"></textarea><br>
    <input class="message_box" type="text" id="input_message" name="input_message" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"><br>
    <button class="btn btn_message">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>`;
    delete item.MessageList;
    let textarea = document.querySelector('.textarea');
   // currentRoomId = 9;
    for (let messageElement in item) {
        for (let key in item[messageElement]) {
            let newString = `${key}: ${item[messageElement][key]}\n`;
            textarea.value += newString;
        };
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    document.querySelector('.btn_message').addEventListener('click', () => {
        let message = document.getElementById("input_message");
        if (message.value !== "") {
            socketForChat.send(JSON.stringify({'usersendcommandroom': 'message', 'room_id': currentRoomId, 'userid': userId, 'message': message.value}));
            console.log({'usersendcommandroom': 'message', 'room_id': currentRoomId, 'user': userId, 'message': message.value});
            message.value = "";
        };
    });

    // —Å–ª—É—à–∞–µ–º —Å–æ–∫–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
    socketForChat.onmessage = function(event) {
        console.log(event.data);
        let data = JSON.parse(event.data);
        console.log(data);
        textarea.value += `${data['name']}: ${data['message']}\n`;
    };
};
